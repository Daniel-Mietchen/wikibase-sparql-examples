@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix schema: <https://schema.org/> .

<https://www.wikidata.org/#query-72657675f256b16e5664abf41d299ea3> a sh:SPARQLExecutable,
    sh:SPARQLSelectExecutable;
  rdfs:comment "TODO"@en;
  dcterms:isPartOf <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/lb>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/th>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/eu>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/en-gb>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/vec>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/hy>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/id>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/be-tarask>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/tr>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/ro>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/he>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/zh>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/pt-br>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/si>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/eo>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/da>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/ar>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/ko>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/pl>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/ms>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/sv>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/lt>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/nl>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/ca>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/uk>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/it>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/ja>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/es>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/cs>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/ru>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/de>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/fr>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples/en>,
    <https://www.wikidata.org//wiki/Wikidata:SPARQL_query_service/queries/examples>;
  dcterms:license <https://creativecommons.org/licenses/by-sa/4.0/>;
  sh:prefixes <https://example.org/to_decide/wikidata_prefixes>;
  schema:target <https://query.wikidata.org/sparql>;
  sh:select """PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX bd: <http://www.bigdata.com/rdf#>
SELECT DISTINCT ?character ?characterLabel ?birth ?death WITH {
  # Fictional character subclasses as a named subquery
  SELECT ?fictiontype WHERE {
    ?fictiontype wdt:P279* wd:Q95074. hint:Prior hint:gearing \"forward\".
  }
} AS %i
WHERE
{
  INCLUDE %i
  ?character wdt:P31 ?fictiontype.
  # Date of birth
  { ?character wdt:P569 ?birth . }
  # Date of death
  UNION { ?character wdt:P570 ?death . }
  # Get actual decade to compare with dates
  BIND(xsd:integer(YEAR(NOW())/10) as ?actual_decade).
  # Only show characters born or deceased in the current decade
  FILTER(xsd:integer(YEAR(?birth)/10) = ?actual_decade || xsd:integer(YEAR(?death)/10) = ?actual_decade)
  SERVICE wikibase:label {
    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],mul,en\" .
  }
} ORDER BY ?birth ?death""",
    """PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX wikibase: <http://wikiba.se/ontology#>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX bd: <http://www.bigdata.com/rdf#>
SELECT DISTINCT ?character ?characterLabel ?birth ?death 
WHERE
{
  {
  # Fictional character subclasses as a named subquery
  SELECT ?fictiontype WHERE {
    ?fictiontype wdt:P279* wd:Q95074. hint:Prior hint:gearing \"forward\".
  }
}
  ?character wdt:P31 ?fictiontype.
  # Date of birth
  { ?character wdt:P569 ?birth . }
  # Date of death
  UNION { ?character wdt:P570 ?death . }
  # Get actual decade to compare with dates
  BIND(xsd:integer(YEAR(NOW())/10) as ?actual_decade).
  # Only show characters born or deceased in the current decade
  FILTER(xsd:integer(YEAR(?birth)/10) = ?actual_decade || xsd:integer(YEAR(?death)/10) = ?actual_decade)
  SERVICE wikibase:label {
    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],mul,en\" .
  }
} ORDER BY ?birth ?death""";
  <http://example.org/bigdata_select> """SELECT DISTINCT ?character ?characterLabel ?birth ?death WITH {
  # Fictional character subclasses as a named subquery
  SELECT ?fictiontype WHERE {
    ?fictiontype wdt:P279* wd:Q95074. hint:Prior hint:gearing \"forward\".
  }
} AS %i
WHERE
{
  INCLUDE %i
  ?character wdt:P31 ?fictiontype.
  # Date of birth
  { ?character wdt:P569 ?birth . }
  # Date of death
  UNION { ?character wdt:P570 ?death . }
  # Get actual decade to compare with dates
  BIND(xsd:integer(YEAR(NOW())/10) as ?actual_decade).
  # Only show characters born or deceased in the current decade
  FILTER(xsd:integer(YEAR(?birth)/10) = ?actual_decade || xsd:integer(YEAR(?death)/10) = ?actual_decade)
  SERVICE wikibase:label {
    bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],mul,en\" .
  }
} ORDER BY ?birth ?death""" .
